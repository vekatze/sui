import {
  core.errno {Errno, errno},
  core.text {_from-c-string},
  http-base.request {request},
  http-base.request.parse.v1-1 {request-parser},
  http-base.response {response, text-response},
  http-base.response.show.v1-1 {show-response},
  noa.utils {_print-green-bold},
  socket.address-family,
  socket.socket {Socket-Address, socket-address, start-server},
  socket.socket-type {SOCK_STREAM},
  zonk.parser {run},
  zonk.state {new-state},
}

data server {
| Server(
    address: &text,
    number-of-threads: int,
    port: int16,
    act: (request) -> response,
  )
}

inline _run(act: (request) -> response): (address: socket-address, text) -> text {
  function (address: socket-address, t: text) {
    let Socket-Address of {ip-address, port} = address in
    _print-green-bold("INFO: ");
    printf("{}:{}\n", [ip-address, %ld(magic cast(_, _, port))]);
    pin st = new-state(t) in
    match run(request-parser(), st) {
    | Right(req) =>
      let result = act(req) in
      show-response(result)
    | Left(_) =>
      show-response(text-response(400, *"The server couldn't parse the request\n"))
    }
  }
}

foreign {
  strerror(int): pointer,
}

define _errno-to-text(e: errno): text {
  let Errno(i) = e in
  let c-str = magic external strerror(i) in
  _from-c-string(c-str)
}

inline serve(s: server): unit {
  let Server of {address, number-of-threads, port, act} = s in
  let server-config =
    socket.socket.Config of {
      family = socket.address-family.AF_INET,
      comm-type = SOCK_STREAM,
      reuse-socket = True,
      protocol = 0,
      port,
      address,
      backlog = 128,
      threads = number-of-threads,
      interpreter = _run(act),
    }
  in
  match start-server(server-config) {
  | Left(Errno(i)) =>
    printf("failed to start a server.\nerror: {} {}\n", [%ld(i), _errno-to-text(Errno(i))])
  | Right(_) =>
    Unit
  }
}
